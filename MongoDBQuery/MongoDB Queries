
MongoDB Queries:

Count Query
db.getCollection('persons').find({}).count()

Find Query 
db.getCollection('persons').find({})

Empty Query
db.getCollection('persons').find({})

Equality Query
db.getCollection('persons').find({"age" : 20})
db.getCollection('persons').find({"gender" : "female","eyeColor" : "green"})

Introduction to Operators
 - we can use the Comparison Operators for sorting number, string, Date

Comparison Operators:
         Abrevation ($eq = equal to , 
                     $neq = not equal to, 
                     $lt = less than, 
                     $gt = greater than, 
                     $lte = less than or equal to
                     $in = in
                     $nin = not in
                     $and
                     $or
                     $all
                     $size)

          db.getCollection('persons').find({"eyeColor" : {"$ne": "green" }})
          db.getCollection('persons').find({"age" : {"$gt": 25 }})
          db.getCollection('persons').find({"age" : {"$gte": 25 }})
          db.getCollection('persons').find({"age" : {"$gt": 25, "lte" :30 }})
          db.getCollection('persons').find({"name" : {"$gt": "N" }}).sort({"name" : 1})
          db.getCollection('persons').find({"age" : {"$in": [21, 22]}})
          db.getCollection('persons').find({"age" : {"$nin": [21, 22]}})
          db.getCollection('persons').find({$and: [{gender:"female"}, {favoriteFruit:"banana"}]})
          db.getCollection('persons').find({$and: [{age:{$ne:25}}, {age:{$gte: 25}}]}).sort({age: -1}) \\ $sort key ordering must be 1 (for ascending) or -1 (for descending)"
          db.getCollection('persons').find({$or:[{isActive:true},{eyeColor:"blue"}]})
Embedded Documents:

         db.getCollection('persons').find({"company":{
        "title" : "DIGITALUS",
        "email" : "kittysnow@digitalus.com",
        "phone" : "+1 (949) 568-3470",
        "location" : {
            "country" : "Italy",
            "address" : "154 Arlington Avenue"
         }
         }})
         
         db.getCollection('persons').find({"company.location.country": "Italy"})
   
Arrays by Specific Value:

        db.getCollection('persons').find({"tags.1": "ad"})
        db.getCollection('persons').find({tags:{$all:["id","ad"]}})
        db.getCollection('persons').find({tags:{$size:4}})
   
Array of Nested Documents:

      db.getCollection('first').find({"friends.age" : 23})
      db.getCollection('first').find({"friends.age" : {$gt:30, $lt:25}})

$elemMatch operator:
     
     db.getCollection('first').find({friends: {$elemMatch:{"name":"Ram", "age":27}}})

$exists and $type query operators

      db.getCollection('first').find({name:{$exists:true}}) - to check name field is present in the document

      db.getCollection('first').find({"friends.age" :{$type:"int"}})

Fields Filtering

      db.getCollection('persons').find({}, {name:1, age:1, company:1})
      db.getCollection('persons').find({}, {name:1, age:1, "company.location":1})

$regex operator

      db.getCollection('persons').find({name:{$regex: /rel/i}})

Mapreduce funcation : 
      var mapfunction = function(){emit(this.age,this.favoriteFruit)}
      var reducefunction = function(key,value){return Array.concat(value)}
      db.persons.mapReduce(mapfunction,reducefunction,{'out':'Result_mapreduce'})

      db.Result_mapreduce.find()

      //using query in map reduce

      db.persons.mapReduce(function(){emit(this.age,this.favoriteFruit);},
                            function(key,value){return Array.concat(value)},
                            {query:{age:{$eq:"banana"}},
                            out:'Result1_mapreduce'})

   
Join Two Collections :

   $lookup (Aggregation) function - creates an outer left join with another collection and helps to filter data from merged data.

   whose syntax is defined below:

   {
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
   }

   Sample: 
   Students.aggregate([{
                        $lookup: {
                        From: ‘Grades’,
                        LocalField: ‘Student_id’,
                        foreignField: ‘Stud_id’,
                        as: ‘Student_grade’
                     }}]);

   db.userInfo.aggregate([
    { $lookup:
        {
           from: "address",
           localField: "contact_name",
           foreignField: "name",
           as: "address"
        }
    }
]).pretty();

$lookup is used with a pipeline to perform MongoDB join two collection.



